'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var vi_VN = {
  'email': 'Email',
  'telNo': 'Số điện thoại liên lạc',
  'startDate': 'Ngày bắt đầu',
  'employeeNo': 'Mã nhân viên',
  'processNo': 'Số hiệu quy trình',
  'codeNo': 'Số văn bản',
  'templateNo': 'Số hiệu mẫu',
  'projectNo': 'Số hiệu dự án',
  'archiveNo': 'Số hồ sơ',
  'roleId': 'Đơn vị/ nhóm',
  'toUserId': 'Cá nhân',
  'managerId': 'Mã người phụ trách/ thực hiện',
  'managerName': 'Tên người phụ trách/ thực hiện',
  'hostingId': 'Mã đơn vị chủ trì',
  'groupCode': 'Mã code nhóm',
  'jobCode': 'Mã chức vụ',
  'issuerCode': 'Mã cơ quan ban hành',
  'govAgencyCode': 'Mã phòng ban',
  'categoryName': 'Tên lĩnh vực',
  'subject' : 'Tên hoạt động',
  'collectionCode' : 'Mã danh mục',
  'itemCode': 'Mã code dữ liệu',
  'groupCode' : 'Mã code nhóm',
  'className' : 'Lớp đối tượng gốc',
  'classPK' : 'PK của đối tượng gốc',
  'textMessage': 'Nội dung thông báo',
  'fullName' : 'Tên cá nhân, đơn vị, nhóm',
  'name' : 'Tên vùng làm việc',
  'scope': 'Phạm vi áp dụng',
  'tag': 'Chuỗi nhãn',
  'processName': 'Tên quy trình',
  'processNo': 'Số hiệu quy trình',
  'fileEntryId': 'fileEntryId',
  'doItem': 'Tên công việc thực hiện',
  'activityId': 'Mã hoạt động',
  'projectName': 'Tên dự án/ hợp đồng',
  'projectNo': 'Số hiệu dự án/hợp đồng',

  'duplicate': 'đã tồn tại',
  'required': 'là bắt buộc',
	'title': 'Position name',
  'code': 'Position code',

};
var en_US = {
  'email': 'Email',
  'telNo': 'Telephone number',
  'startDate': 'Start date',
  'employeeNo': 'Employee number',
  'processNo': 'Process number',
  'codeNo': 'Document number',
  'templateNo': 'Template number',
  'projectNo': 'Project number',
  'archiveNo': 'Archive number',
  'roleId': 'Working unit',
  'toUserId': 'User',
  'managerId': 'Manager code',
  'managerName': 'Manager name',
  'hostingId': 'Hosting code',
  'groupCode': 'Group code',
  'jobCode': 'Jobpos code',
  'issuerCode': 'Issuer code',
  'govAgencyCode': 'Government agency code',
  'categoryName': 'Category name',
  'subject' : 'Subject',
  'collectionCode' : 'Collection Code',
  'itemCode' : 'Data code',
  'groupCode' : 'Group code',
  'className' : 'Class name',
  'classPK' : 'Class PK',
  'textMessage' : 'textMessage',
  'fullName' : 'Full name',
  'name' : 'Workspace name',
  'scope': 'Scope',
  'tag' : 'tag',
  'processName': 'Process name',
  'processNo': 'Process number',
  'fileEntryId': 'fileEntryId',
  'doItem': 'doItem name',
  'activityId': 'Activity code',
  'projectName' : 'Project name',
  'projectNo': 'Project number',

  'duplicate': 'is duplicate',
  'required': 'is required',
	'title': 'Tên chức vụ',
  'code': 'Mã chức vụ',

};

// Get message notification
var lang_locale = themeDisplay.getLanguageId();
// var lang_locale = 'vi_VN';

var notify = function notify(res) {
  var mess = res.message ? res.message : '';
  var type_err = res.type ? res.type : '';
  var type_errText;
  if (type_err == 'maxlength') {
    type_errText = mess ? mess.match(':\"(.*)\"}')[1] : '';
  }
  var target = mess ? mess.match('\"(.*)\":')[1] : '';

  var multil_lang = function multil_lang(lang) {
    _classCallCheck(this, multil_lang);

    if (lang == 'vi_VN') {
      this.language = vi_VN;
    } else {
      this.language = en_US;
    }
    this.translate = function (key) {
      return this.language[key] ? this.language[key] : '';
    };
  };

  var language = new multil_lang(lang_locale);
  if (type_err == 'maxlength') {
    return mess && type_err ? 'Độ dài ' + language.translate(target) + ' không quá ' + type_errText + ' ký tự' : '';
  } else {
    return mess && type_err ? language.translate(target) + ' ' + language.translate(type_err) : '';
  }
};

// Compile html multi language
var compile_language = function compile_language() {
  $("[m-lang]").each(function (index) {
    var attr_val = $(this).attr('m-lang');
    var str = mobilink_lang(lang_locale).translate(attr_val);
    $(this).html(str);
  });
};
// compile_language();
// 
var mobilink_lang = function mobilink_lang(lang) {
  var multil_lang = function multil_lang(lang) {
    _classCallCheck(this, multil_lang);

    if (lang == 'vi_VN') {
      this.language = vi_VN;
    } else {
      this.language = en_US;
    }
    this.translate = function (key) {
      return this.language[key];
    };
  };

  var language;
  return language = new multil_lang(lang_locale);
  // return language.translate(str);
};
var m_lang = mobilink_lang(lang_locale).language;
mobilink_lang(lang_locale);

function showMessageToastr(type, message){
	toastr.options = {
		"closeButton": true,
		"debug": false,
		"progressBar": true,
		"positionClass": "toast-top-right",
		"onclick": null,
		"showDuration": "400",
		"hideDuration": "1000",
		"timeOut": "2000",
		"extendedTimeOut": "1000",
		"showEasing": "swing",
		"hideEasing": "linear",
		"showMethod": "fadeIn",
		"hideMethod": "fadeOut"
	};
   toastr[type](message);
}

function showMessageByAPICode (code,response) {

	var message,status,mess;
	
	if (code == 200){
		message = "Yêu cầu của bạn được xử lý thành công!";
		status = "success";
	} else if(code == 401) {
		message = "Yêu cầu của bạn xử lý thất bại, chưa đăng nhập vào hệ thống!!!";
		status = "error";
	} else if(code == 403) {
		message = "Yêu cầu của bạn xử lý thất bại, không có quyền thay đổi dữ liệu!!!";
		status = "error";
	} else if(code == 404) {
		message = "Yêu cầu của bạn xử lý thất bại, không tìm thấy tài nguyên!!!";
		status = "error";
	} else if(code == 405) {
		message = "Yêu cầu không được phép xử lý!!!";
		status = "error";
	} else if(code == 409 || code == 412) {
		mess = response?notify(response):'';
		message = "Yêu cầu của bạn xử lý thất bại, " + mess;
		status = "error";
	} else if(code == 500) {
		message = "Yêu cầu của bạn xử lý thất bại, lỗi hệ thống";
		status = "error";
	} else {
		message = "Lỗi kết nối!!!";
		status = "error";
	}

	showMessageToastr(status, message);

};

function downloadFile(options, onsuccess, onerror){
    var config={
        headers: {
            'groupId': options.groupId,
        },
        responseType: 'blob'
    }
    axios.get(options.url, config).then(function (response) {
        var contentType = response.headers['content-type'];
        var mime = "text/plain, text/html, text/css, text/javascript";
        mime += "image/gif, image/png, image/jpeg, image/bmp, image/webp";
        mime += "audio/midi, audio/mpeg, audio/webm, audio/ogg, audio/wav";
        mime += "video/webm, video/ogg";
        
		var mimeOffice = "application/pkcs12, application/vnd.mspowerpoint, application/xhtml+xml, application/xml, application/pdf";
		mimeOffice += "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
		mimeOffice += "application/vnd.oasis.opendocument.text, application/msword";
		
		var mimeExcel = "application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel.sheet.macroenabled.12";

		var url = response.headers['url-path'];
		url = url.split('?')[0];	
		url = themeDisplay.getCDNBaseURL() + url;
		console.log(encodeURIComponent(url));
		console.log(url);
        if( mime.indexOf(contentType || 'none') >= 0 ){
        	//xem tren trinh duyet
    		window.open(url);
        } else if ( mimeExcel.indexOf(contentType || 'none') >= 0){
        	//xem tren office
        	url = encodeURIComponent(url);
    		window.open("https://view.officeapps.live.com/op/view.aspx?src=" + url);
        } else if ( contentType.indexOf('application/vnd') >=0 || mimeOffice.indexOf(contentType || 'none') >= 0) {
        	//xem tren google
    		
			url = "https://drive.google.com/viewerng/viewer?url=" + url ;/**+ "&embedded=true"*/
			window.open(url);
        } else {
        	//downfile
    		window.open(url);
        }
        onsuccess();
                                    
    })
        .catch(function (error) {
		console.log(error);
            onerror(error);
        })

}

function viewCommentFileAttach(url, fileType){
    
    var contentType = fileType;
    var mime = "text/plain, text/html, text/css, text/javascript";
    mime += "image/gif, image/png, image/jpeg, image/bmp, image/webp";
    mime += "audio/midi, audio/mpeg, audio/webm, audio/ogg, audio/wav";
    mime += "video/webm, video/ogg";
    
	var mimeOffice = "application/pkcs12, application/vnd.mspowerpoint, application/xhtml+xml, application/xml, application/pdf";
	mimeOffice += "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
	mimeOffice += "application/vnd.oasis.opendocument.text, application/msword";
	
	var mimeExcel = "application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel.sheet.macroenabled.12";

	url = url.split('?')[0];
	url = themeDisplay.getCDNBaseURL() + url;
	console.log(encodeURIComponent(url));
	console.log(url);
    if( mime.indexOf(contentType || 'none') >= 0 ){
    	//xem tren trinh duyet
		window.open(url);
    } else if ( mimeExcel.indexOf(contentType || 'none') >= 0){
    	//xem tren office
    	url = encodeURIComponent(url);
		window.open("https://view.officeapps.live.com/op/view.aspx?src=" + url);
    } else if ( contentType.indexOf('application/vnd') >=0 || mimeOffice.indexOf(contentType || 'none') >= 0) {
    	//xem tren google
		
		url = "https://drive.google.com/viewerng/viewer?url=" + url ;/**+ "&embedded=true"*/
		window.open(url);
    } else {
    	//downfile
		window.open(url);
    }

}

function viewFileAttach2 ( options, onsuccess, onerror) {

var mime = [".doc", ".docm", ".docx", ".dot", ".dotm", ".dotx", ".epub", ".fodt"];
    mime = mime.concat([".htm", ".html", ".mht", ".odt", ".ott", ".pdf", ".rtf", ".txt"]);
    mime = mime.concat([".djvu", ".xps"]);
    mime = mime.concat([".csv", ".fods", ".ods", ".ots", ".xls", ".xlsm", ".xlsx", ".xlt"]);
    mime = mime.concat([".xltm", ".xltx"]);

    mime = mime.concat([".fodp", ".odp", ".otp", ".pot", ".potm", ".potx", ".pps", ".ppsm"]);
    mime = mime.concat([".ppsx", ".ppt", ".pptm", ".pptx"]);

    mime = mime.concat(["application/pkcs12", "application/vnd.mspowerpoint", "application/xhtml+xml", "application/xml", "application/pdf"]);
	mime = mime.concat(["application/vnd.openxmlformats-officedocument.wordprocessingml.document"]);
	mime = mime.concat(["application/vnd.oasis.opendocument.text", "application/msword"]);
	mime = mime.concat(["application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "application/vnd.ms-excel.sheet.macroenabled.12"]);

    if ( mime.filter(function(item){ 
	return item.indexOf( options.fileType || 'none') >= 0 || item.indexOf( options.extension || 'none') >= 0
	 }).length > 0 ) {
	if( options.edit_online_key != 'ACTIVE' ){
		downloadFile(options, onsuccess, onerror);
		return false;
	}
	var url = themeDisplay.getCDNBaseURL() + "/o/online-editing/editor?code=" + window.btoa( options.fileAttachId );
	window.open(url);
	onsuccess();
    } else {

	var config={
		headers: {
		    'groupId': options.groupId,
		},
		responseType: 'blob'
	    }
	    axios.get(options.url, config).then(function (response) {
		var contentType = response.headers['content-type'];
		var mime = "text/plain, text/html, text/css, text/javascript";
		mime += "image/gif, image/png, image/jpeg, image/bmp, image/webp";
		mime += "audio/midi, audio/mpeg, audio/webm, audio/ogg, audio/wav";
		mime += "video/webm, video/ogg, application/pdf";

		var url = response.headers['url-path'];
		url = url.split('?')[0];	
		url = themeDisplay.getCDNBaseURL() + url;
		
		if( mime.indexOf(contentType || 'none') >= 0 ){
			//xem tren trinh duyet
	    		window.open(url);
		} else {
			//downfile
	    		var fileName = options.fileName

			  var a = document.createElement("a");
			  document.body.appendChild(a);
			  a.style = "display: none";
			  var url = window.URL.createObjectURL(response.data)
			  a.href = url;
			  a.download = fileName;
			  a.click();
			  window.URL.revokeObjectURL(url);
		}
		onsuccess();
		                            
	    })
        .catch(function (error) {
		console.log(error);
            onerror(error);
        })
    }

}

function downloadFile2 (options, onsuccess, onerror){

    var config={
        headers: {
            'groupId': options.groupId,
        },
        responseType: 'blob'
    }
    axios.get( options.url, config).then(function (response) {
          
          var fileName = options.fileName

          var a = document.createElement("a");
          document.body.appendChild(a);
          a.style = "display: none";
          var url = window.URL.createObjectURL(response.data)
          a.href = url;
          a.download = fileName;
          a.click();
          window.URL.revokeObjectURL(url);


          //var url = window.URL.createObjectURL(response.data)
          onsuccess()
          //window.open(url)
        })
          .catch(function (error) {
            console.log(error)
            onerror( error )
          })

}
